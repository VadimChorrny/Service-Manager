// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Entities.BankEntity.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("InstructionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Links")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinksApi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Links = "www.monobank.ua",
                            LinksApi = "https://api.monobank.ua/docs/",
                            Name = "Monobank"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Links = "https://privatbank.ua/",
                            LinksApi = "https://api.privatbank.ua/",
                            Name = "PrivatBank"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Links = "https://ukrsibbank.com",
                            LinksApi = "",
                            Name = "UKRSIBBANK"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            Links = "www.chase.com",
                            LinksApi = "https://www.chase.com/digital/data-sharing",
                            Name = "Chase"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 2,
                            Links = "http://www.wellsfargo.com",
                            LinksApi = "https://developer.wellsfargo.com/",
                            Name = "Wells Fargo Bank"
                        });
                });

            modelBuilder.Entity("Core.Entities.BillingCycleEntity.BillingCycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("LangId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("BillingCycles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Monthly"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Yearly"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Half-Yearly"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Weekly"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Quartaly"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Tap to fix"
                        });
                });

            modelBuilder.Entity("Core.Entities.CardEntity.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserBankId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserBankId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Core.Entities.CategoryEntity.ServiceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LangId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Core.Entities.CountryEntity.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Norway"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Finland"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = 8,
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = 12,
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Austria"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 19,
                            Name = "United States"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Japan"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Malta"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 24,
                            Name = "France"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Taiwan"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = 30,
                            Name = "South Korea"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Israel"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Chile"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Uruguay"
                        },
                        new
                        {
                            Id = 41,
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Qatar"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Mauritius"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Romania"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Seychelles"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Montenegro"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Panama"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Trinidad And Tobago"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Peru"
                        },
                        new
                        {
                            Id = 57,
                            Name = "China"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Bahrain"
                        },
                        new
                        {
                            Id = 59,
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Oman"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Jamaica"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Albania"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 68,
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = 69,
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Bosnia And Herzegovina"
                        },
                        new
                        {
                            Id = 71,
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = 72,
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = 73,
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            Id = 74,
                            Name = "Botswana"
                        },
                        new
                        {
                            Id = 75,
                            Name = "Cape Verde"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Paraguay"
                        },
                        new
                        {
                            Id = 78,
                            Name = "Ecuador"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Moldova"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Suriname"
                        },
                        new
                        {
                            Id = 81,
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = 82,
                            Name = "Philippines"
                        },
                        new
                        {
                            Id = 83,
                            Name = "Vietnam"
                        },
                        new
                        {
                            Id = 84,
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = 85,
                            Name = "Namibia"
                        },
                        new
                        {
                            Id = 86,
                            Name = "Guyana"
                        },
                        new
                        {
                            Id = 87,
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 88,
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = 89,
                            Name = "Belize"
                        },
                        new
                        {
                            Id = 90,
                            Name = "Tunisia"
                        });
                });

            modelBuilder.Entity("Core.Entities.CountryEntity.CountryTranslate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LangId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CountryTranslates");
                });

            modelBuilder.Entity("Core.Entities.CountryEntity.PhoneCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("PhoneCodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "380",
                            CountryId = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "45",
                            CountryId = 2
                        },
                        new
                        {
                            Id = 3,
                            Code = "47",
                            CountryId = 3
                        },
                        new
                        {
                            Id = 4,
                            Code = "41",
                            CountryId = 4
                        },
                        new
                        {
                            Id = 5,
                            Code = "46",
                            CountryId = 5
                        },
                        new
                        {
                            Id = 6,
                            Code = "358",
                            CountryId = 6
                        },
                        new
                        {
                            Id = 7,
                            Code = "31",
                            CountryId = 7
                        },
                        new
                        {
                            Id = 8,
                            Code = "64",
                            CountryId = 8
                        },
                        new
                        {
                            Id = 9,
                            Code = "49",
                            CountryId = 9
                        },
                        new
                        {
                            Id = 10,
                            Code = "352",
                            CountryId = 10
                        },
                        new
                        {
                            Id = 11,
                            Code = "354",
                            CountryId = 11
                        },
                        new
                        {
                            Id = 12,
                            Code = "44",
                            CountryId = 12
                        },
                        new
                        {
                            Id = 13,
                            Code = "353",
                            CountryId = 13
                        },
                        new
                        {
                            Id = 14,
                            Code = "43",
                            CountryId = 14
                        },
                        new
                        {
                            Id = 15,
                            Code = "1",
                            CountryId = 15
                        },
                        new
                        {
                            Id = 16,
                            Code = "852",
                            CountryId = 16
                        },
                        new
                        {
                            Id = 17,
                            Code = "65",
                            CountryId = 17
                        },
                        new
                        {
                            Id = 18,
                            Code = "61",
                            CountryId = 18
                        },
                        new
                        {
                            Id = 19,
                            Code = "1",
                            CountryId = 19
                        },
                        new
                        {
                            Id = 20,
                            Code = "81",
                            CountryId = 20
                        },
                        new
                        {
                            Id = 21,
                            Code = "356",
                            CountryId = 21
                        },
                        new
                        {
                            Id = 22,
                            Code = "372",
                            CountryId = 22
                        },
                        new
                        {
                            Id = 23,
                            Code = "32",
                            CountryId = 23
                        },
                        new
                        {
                            Id = 24,
                            Code = "33",
                            CountryId = 24
                        },
                        new
                        {
                            Id = 25,
                            Code = "886",
                            CountryId = 25
                        },
                        new
                        {
                            Id = 26,
                            Code = "34",
                            CountryId = 26
                        },
                        new
                        {
                            Id = 27,
                            Code = "351",
                            CountryId = 27
                        },
                        new
                        {
                            Id = 28,
                            Code = "386",
                            CountryId = 28
                        },
                        new
                        {
                            Id = 29,
                            Code = "420",
                            CountryId = 29
                        },
                        new
                        {
                            Id = 30,
                            Code = "82",
                            CountryId = 30
                        },
                        new
                        {
                            Id = 31,
                            Code = "39",
                            CountryId = 31
                        },
                        new
                        {
                            Id = 32,
                            Code = "972",
                            CountryId = 32
                        },
                        new
                        {
                            Id = 33,
                            Code = "421",
                            CountryId = 33
                        },
                        new
                        {
                            Id = 34,
                            Code = "370",
                            CountryId = 34
                        },
                        new
                        {
                            Id = 35,
                            Code = "357",
                            CountryId = 35
                        },
                        new
                        {
                            Id = 36,
                            Code = "371",
                            CountryId = 36
                        },
                        new
                        {
                            Id = 37,
                            Code = "48",
                            CountryId = 37
                        },
                        new
                        {
                            Id = 38,
                            Code = "56",
                            CountryId = 38
                        },
                        new
                        {
                            Id = 39,
                            Code = "506",
                            CountryId = 39
                        },
                        new
                        {
                            Id = 40,
                            Code = "598",
                            CountryId = 40
                        },
                        new
                        {
                            Id = 41,
                            Code = "971",
                            CountryId = 41
                        },
                        new
                        {
                            Id = 42,
                            Code = "60",
                            CountryId = 42
                        },
                        new
                        {
                            Id = 43,
                            Code = "30",
                            CountryId = 43
                        },
                        new
                        {
                            Id = 44,
                            Code = "974",
                            CountryId = 44
                        },
                        new
                        {
                            Id = 45,
                            Code = "230",
                            CountryId = 45
                        },
                        new
                        {
                            Id = 46,
                            Code = "385",
                            CountryId = 46
                        },
                        new
                        {
                            Id = 47,
                            Code = "36",
                            CountryId = 47
                        },
                        new
                        {
                            Id = 48,
                            Code = "40",
                            CountryId = 48
                        },
                        new
                        {
                            Id = 49,
                            Code = "248",
                            CountryId = 49
                        },
                        new
                        {
                            Id = 50,
                            Code = "359",
                            CountryId = 50
                        },
                        new
                        {
                            Id = 51,
                            Code = "382",
                            CountryId = 51
                        },
                        new
                        {
                            Id = 52,
                            Code = "507",
                            CountryId = 52
                        },
                        new
                        {
                            Id = 53,
                            Code = "381",
                            CountryId = 53
                        },
                        new
                        {
                            Id = 54,
                            Code = "995",
                            CountryId = 54
                        },
                        new
                        {
                            Id = 55,
                            Code = "1-868",
                            CountryId = 55
                        },
                        new
                        {
                            Id = 56,
                            Code = "51",
                            CountryId = 56
                        },
                        new
                        {
                            Id = 57,
                            Code = "86",
                            CountryId = 57
                        },
                        new
                        {
                            Id = 58,
                            Code = "973",
                            CountryId = 58
                        },
                        new
                        {
                            Id = 59,
                            Code = "54",
                            CountryId = 59
                        },
                        new
                        {
                            Id = 60,
                            Code = "968",
                            CountryId = 60
                        },
                        new
                        {
                            Id = 61,
                            Code = "374",
                            CountryId = 61
                        },
                        new
                        {
                            Id = 62,
                            Code = "965",
                            CountryId = 62
                        },
                        new
                        {
                            Id = 63,
                            Code = "62",
                            CountryId = 63
                        },
                        new
                        {
                            Id = 64,
                            Code = "1-876",
                            CountryId = 64
                        },
                        new
                        {
                            Id = 65,
                            Code = "355",
                            CountryId = 65
                        },
                        new
                        {
                            Id = 66,
                            Code = "66",
                            CountryId = 66
                        },
                        new
                        {
                            Id = 67,
                            Code = "52",
                            CountryId = 67
                        },
                        new
                        {
                            Id = 68,
                            Code = "7",
                            CountryId = 68
                        },
                        new
                        {
                            Id = 69,
                            Code = "55",
                            CountryId = 69
                        },
                        new
                        {
                            Id = 70,
                            Code = "387",
                            CountryId = 70
                        },
                        new
                        {
                            Id = 71,
                            Code = "966",
                            CountryId = 71
                        },
                        new
                        {
                            Id = 72,
                            Code = "57",
                            CountryId = 72
                        },
                        new
                        {
                            Id = 73,
                            Code = "94",
                            CountryId = 73
                        },
                        new
                        {
                            Id = 74,
                            Code = "267",
                            CountryId = 74
                        },
                        new
                        {
                            Id = 75,
                            Code = "238",
                            CountryId = 75
                        },
                        new
                        {
                            Id = 76,
                            Code = "1-809",
                            CountryId = 76
                        },
                        new
                        {
                            Id = 77,
                            Code = "1-829",
                            CountryId = 76
                        },
                        new
                        {
                            Id = 78,
                            Code = "1-849",
                            CountryId = 76
                        },
                        new
                        {
                            Id = 79,
                            Code = "595",
                            CountryId = 77
                        },
                        new
                        {
                            Id = 80,
                            Code = "593",
                            CountryId = 78
                        },
                        new
                        {
                            Id = 81,
                            Code = "373",
                            CountryId = 79
                        },
                        new
                        {
                            Id = 82,
                            Code = "597",
                            CountryId = 80
                        },
                        new
                        {
                            Id = 83,
                            Code = "27",
                            CountryId = 81
                        },
                        new
                        {
                            Id = 84,
                            Code = "63",
                            CountryId = 82
                        },
                        new
                        {
                            Id = 85,
                            Code = "84",
                            CountryId = 83
                        },
                        new
                        {
                            Id = 86,
                            Code = "962",
                            CountryId = 84
                        },
                        new
                        {
                            Id = 87,
                            Code = "264",
                            CountryId = 85
                        },
                        new
                        {
                            Id = 88,
                            Code = "592",
                            CountryId = 86
                        },
                        new
                        {
                            Id = 89,
                            Code = "90",
                            CountryId = 87
                        },
                        new
                        {
                            Id = 90,
                            Code = "994",
                            CountryId = 88
                        },
                        new
                        {
                            Id = 91,
                            Code = "501",
                            CountryId = 89
                        },
                        new
                        {
                            Id = 92,
                            Code = "217",
                            CountryId = 90
                        });
                });

            modelBuilder.Entity("Core.Entities.CurrencyEntity.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LettersSign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode")
                        .IsUnique();

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrencyCode = "980",
                            LettersSign = "₴",
                            Name = "Ukrainian Hryvnia",
                            ShortName = "UAH"
                        },
                        new
                        {
                            Id = 2,
                            CurrencyCode = "978",
                            LettersSign = "€",
                            Name = "Euro",
                            ShortName = "UAH"
                        },
                        new
                        {
                            Id = 3,
                            CurrencyCode = "840",
                            LettersSign = "$",
                            Name = "US Dollar",
                            ShortName = "USD"
                        },
                        new
                        {
                            Id = 4,
                            CurrencyCode = "826",
                            LettersSign = "£",
                            Name = "British pound",
                            ShortName = "GBP"
                        },
                        new
                        {
                            Id = 5,
                            CurrencyCode = "124",
                            LettersSign = "$",
                            Name = "Canadian Dollar",
                            ShortName = "CAD"
                        },
                        new
                        {
                            Id = 6,
                            CurrencyCode = "036",
                            LettersSign = "$",
                            Name = "Australian Dollar",
                            ShortName = "AUD"
                        },
                        new
                        {
                            Id = 7,
                            CurrencyCode = "756",
                            LettersSign = "CHF",
                            Name = "Swiss Franc",
                            ShortName = "CHF"
                        },
                        new
                        {
                            Id = 8,
                            CurrencyCode = "484",
                            LettersSign = "$",
                            Name = "Mexican Peso",
                            ShortName = "MXN"
                        },
                        new
                        {
                            Id = 9,
                            CurrencyCode = "356",
                            LettersSign = "₹",
                            Name = "Indian Ruble",
                            ShortName = "INR"
                        },
                        new
                        {
                            Id = 10,
                            CurrencyCode = "956",
                            LettersSign = "R$",
                            Name = "Brazilian Real",
                            ShortName = "BRL"
                        },
                        new
                        {
                            Id = 11,
                            CurrencyCode = "208",
                            LettersSign = "kr.",
                            Name = "Danish Krone",
                            ShortName = "DKK"
                        },
                        new
                        {
                            Id = 12,
                            CurrencyCode = "752",
                            LettersSign = "kr",
                            Name = "Swedish Krona",
                            ShortName = "SEK"
                        },
                        new
                        {
                            Id = 13,
                            CurrencyCode = "578",
                            LettersSign = "kr",
                            Name = "Norwegian Krone",
                            ShortName = "NOK"
                        },
                        new
                        {
                            Id = 14,
                            CurrencyCode = "191",
                            LettersSign = "kn",
                            Name = "Croatian Kuna",
                            ShortName = "HRK"
                        },
                        new
                        {
                            Id = 15,
                            CurrencyCode = "554",
                            LettersSign = "$",
                            Name = "New Zealand Dollar",
                            ShortName = "NZD"
                        },
                        new
                        {
                            Id = 16,
                            CurrencyCode = "203",
                            LettersSign = "Kč",
                            Name = "Czech Koruna",
                            ShortName = "CZK"
                        },
                        new
                        {
                            Id = 17,
                            CurrencyCode = "392",
                            LettersSign = "¥",
                            Name = "Japanese Yen",
                            ShortName = "JPY"
                        },
                        new
                        {
                            Id = 18,
                            CurrencyCode = "985",
                            LettersSign = "zł",
                            Name = "Polish Zloty",
                            ShortName = "PLN"
                        },
                        new
                        {
                            Id = 19,
                            CurrencyCode = "946",
                            LettersSign = "L",
                            Name = "Romanian Leu",
                            ShortName = "RON"
                        },
                        new
                        {
                            Id = 20,
                            CurrencyCode = "764",
                            LettersSign = "฿",
                            Name = "Thai Baht",
                            ShortName = "THB"
                        },
                        new
                        {
                            Id = 21,
                            CurrencyCode = "784",
                            LettersSign = "د.إ",
                            Name = "United Arab Emirates Dirham",
                            ShortName = "AED"
                        },
                        new
                        {
                            Id = 22,
                            CurrencyCode = "344",
                            LettersSign = "$",
                            Name = "Hong Kong Dollar",
                            ShortName = "HKD"
                        },
                        new
                        {
                            Id = 23,
                            CurrencyCode = "348",
                            LettersSign = "Ft",
                            Name = "Hungarian Forint",
                            ShortName = "HUF"
                        },
                        new
                        {
                            Id = 24,
                            CurrencyCode = "376",
                            LettersSign = "₪",
                            Name = "Israeli New Sheqel",
                            ShortName = "ILS"
                        },
                        new
                        {
                            Id = 25,
                            CurrencyCode = "702",
                            LettersSign = "$",
                            Name = "Singapore Dollar",
                            ShortName = "SGD"
                        },
                        new
                        {
                            Id = 26,
                            CurrencyCode = "949",
                            LettersSign = "₺",
                            Name = "Turkish Lira",
                            ShortName = "TRY"
                        },
                        new
                        {
                            Id = 27,
                            CurrencyCode = "710",
                            LettersSign = "R",
                            Name = "South African Rand",
                            ShortName = "ZAR"
                        },
                        new
                        {
                            Id = 28,
                            CurrencyCode = "975",
                            LettersSign = "lv.",
                            Name = "Bulgarian Lev",
                            ShortName = "BGN"
                        });
                });

            modelBuilder.Entity("Core.Entities.LanguageEntity.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmallName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d13646d-700f-444c-8fbf-aa540f08700d"),
                            Name = "English",
                            SmallName = "EN"
                        },
                        new
                        {
                            Id = new Guid("0ea31b65-13ab-474d-bd52-3c79e8fea7ce"),
                            Name = "Ukrainian",
                            SmallName = "UA"
                        });
                });

            modelBuilder.Entity("Core.Entities.OtherEntities.DateFormat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DateFormatName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DateFormats");
                });

            modelBuilder.Entity("Core.Entities.OtherEntities.Labels", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("Core.Entities.OtherEntities.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LangId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("Core.Entities.OtherEntities.RemindMe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LangId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RemindMes");
                });

            modelBuilder.Entity("Core.Entities.OtherEntities.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LangId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Core.Entities.OtherEntities.Synchronization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LangId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Synchronizations");
                });

            modelBuilder.Entity("Core.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Core.Entities.SubscriptionEntity.SearchPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SubscriptionsSearchId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionsSearchId");

                    b.ToTable("SearchPhone");
                });

            modelBuilder.Entity("Core.Entities.SubscriptionEntity.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ServiceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceSubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCategoryId");

                    b.HasIndex("ServiceSubCategoryId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Core.Entities.SubscriptionEntity.ServiceSubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LangId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subcategories");
                });

            modelBuilder.Entity("Core.Entities.SubscriptionEntity.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BillingCycleId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCustom")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LabelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RemindMeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Tariff")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BillingCycleId");

                    b.HasIndex("RemindMeId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Core.Entities.SubscriptionEntity.SubscriptionsSearch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("SubscriptionsSearches");
                });

            modelBuilder.Entity("Core.Entities.TransactionEntity.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Sum")
                        .HasColumnType("real");

                    b.Property<string>("TransactionFromBankId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Core.Entities.UserEntity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmationEmailToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ConfirmationEmailTokenExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<Guid?>("LangId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastActivityDay")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Notification")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayExperience")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PremiumMembership")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDay")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RoundNumbersToIntegers")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LangId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StatusId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "B22698B8-42A2-4115-9631-1C2D1E2AC5F7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "988ad809-ed10-4cdd-b1aa-fd985cb606b4",
                            Email = "Admin@Admin.com",
                            EmailConfirmed = true,
                            Gender = 0,
                            LastActivityDay = new DateTime(2022, 10, 18, 0, 26, 19, 235, DateTimeKind.Local).AddTicks(8074),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "MASTERADMIN",
                            Notification = true,
                            PasswordHash = "AQAAAAEAACcQAAAAEGN491HsrKjHkAOva8BGQ5XHQbGMPzx3rtDVvQ0NYZpvT5sQaVMm15WUsCp3OsVSUw==",
                            PayExperience = 0,
                            PhoneNumber = "XXXXXXXXXXXXX",
                            PhoneNumberConfirmed = true,
                            PremiumMembership = 0,
                            RegistrationDay = new DateTime(2022, 10, 18, 0, 26, 19, 235, DateTimeKind.Local).AddTicks(8039),
                            RoundNumbersToIntegers = false,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            TwoFactorEnabled = false,
                            UserName = "masteradmin"
                        });
                });

            modelBuilder.Entity("Core.Entities.UserEntity.UserBank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("BankToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SynchronizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBanks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2301D884-221A-4E7D-B509-0113DCC043E1",
                            ConcurrencyStamp = "940e6919-0bcf-4591-9246-443888c8e9c8",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "7D9B7113-A8F8-4035-99A7-A20DD400F6A3",
                            ConcurrencyStamp = "428dc82c-d0f7-41f0-8fb4-8d7ffedee326",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Entities.BankEntity.Bank", b =>
                {
                    b.HasOne("Core.Entities.CountryEntity.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Core.Entities.BillingCycleEntity.BillingCycle", b =>
                {
                    b.HasOne("Core.Entities.LanguageEntity.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Core.Entities.CardEntity.Card", b =>
                {
                    b.HasOne("Core.Entities.UserEntity.UserBank", "UserBank")
                        .WithMany("Cards")
                        .HasForeignKey("UserBankId");

                    b.Navigation("UserBank");
                });

            modelBuilder.Entity("Core.Entities.CountryEntity.PhoneCode", b =>
                {
                    b.HasOne("Core.Entities.CountryEntity.Country", "Country")
                        .WithMany("PhoneCodes")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Core.Entities.RefreshToken", b =>
                {
                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.SubscriptionEntity.SearchPhone", b =>
                {
                    b.HasOne("Core.Entities.SubscriptionEntity.SubscriptionsSearch", null)
                        .WithMany("SearchPhones")
                        .HasForeignKey("SubscriptionsSearchId");
                });

            modelBuilder.Entity("Core.Entities.SubscriptionEntity.Service", b =>
                {
                    b.HasOne("Core.Entities.CategoryEntity.ServiceCategory", "ServiceCategory")
                        .WithMany()
                        .HasForeignKey("ServiceCategoryId");

                    b.HasOne("Core.Entities.SubscriptionEntity.ServiceSubCategory", "ServiceSubCategory")
                        .WithMany()
                        .HasForeignKey("ServiceSubCategoryId");

                    b.Navigation("ServiceCategory");

                    b.Navigation("ServiceSubCategory");
                });

            modelBuilder.Entity("Core.Entities.SubscriptionEntity.Subscription", b =>
                {
                    b.HasOne("Core.Entities.BillingCycleEntity.BillingCycle", "BillingCycle")
                        .WithMany()
                        .HasForeignKey("BillingCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.OtherEntities.RemindMe", "RemindMe")
                        .WithMany()
                        .HasForeignKey("RemindMeId");

                    b.HasOne("Core.Entities.SubscriptionEntity.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("BillingCycle");

                    b.Navigation("RemindMe");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.SubscriptionEntity.SubscriptionsSearch", b =>
                {
                    b.HasOne("Core.Entities.SubscriptionEntity.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Core.Entities.TransactionEntity.Transaction", b =>
                {
                    b.HasOne("Core.Entities.CardEntity.Card", "Card")
                        .WithMany("Transactions")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.CurrencyEntity.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.SubscriptionEntity.Subscription", "Subscription")
                        .WithMany("Transactions")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Card");

                    b.Navigation("Currency");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Core.Entities.UserEntity.User", b =>
                {
                    b.HasOne("Core.Entities.CountryEntity.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Core.Entities.CurrencyEntity.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Core.Entities.LanguageEntity.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LangId");

                    b.HasOne("Core.Entities.OtherEntities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Country");

                    b.Navigation("Currency");

                    b.Navigation("Language");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Core.Entities.UserEntity.UserBank", b =>
                {
                    b.HasOne("Core.Entities.BankEntity.Bank", "Bank")
                        .WithMany("UserBanks")
                        .HasForeignKey("BankId");

                    b.HasOne("Core.Entities.UserEntity.User", "User")
                        .WithMany("Banks")
                        .HasForeignKey("UserId");

                    b.Navigation("Bank");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.Entities.UserEntity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.Entities.UserEntity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.UserEntity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.Entities.UserEntity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.BankEntity.Bank", b =>
                {
                    b.Navigation("UserBanks");
                });

            modelBuilder.Entity("Core.Entities.CardEntity.Card", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Core.Entities.CountryEntity.Country", b =>
                {
                    b.Navigation("PhoneCodes");
                });

            modelBuilder.Entity("Core.Entities.SubscriptionEntity.Subscription", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Core.Entities.SubscriptionEntity.SubscriptionsSearch", b =>
                {
                    b.Navigation("SearchPhones");
                });

            modelBuilder.Entity("Core.Entities.UserEntity.User", b =>
                {
                    b.Navigation("Banks");
                });

            modelBuilder.Entity("Core.Entities.UserEntity.UserBank", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
